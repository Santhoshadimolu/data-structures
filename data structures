1)linear search for n numbers
#include <stdio.h>
int linear_search_function(int a[], int n, int key) {
    for (long i = 0; i < n; i++) {
        if (a[i] == key)
            return i; }
    return -1;
}
int main() {
    int arr[100], key, k, n, key_position;
    printf("Enter number of elements in the array\n");
    scanf("%d", &n);
    printf("Enter %d integer(s)\n", n);
    for (k = 0; k < n; k++)
        scanf("%d", &arr[k]);
    printf("Enter a number you would like to search in the array\n");
    scanf("%d", &key);
    key_position = linear_search_function(arr, n, key);
    if (key_position == -1)
        printf("%d isn't present in the array.\n", key);
    else
        printf("%d is present at location %d.\n", key, key_position + 1);
    return 0;
}


2)linear search 
#include <stdio.h>
int linearSearch(int arr[], int size, int target) {
    for (int i = 0; i < size; i++) {
        if (arr[i] == target) {
            return i;
        }  }
    return -1; 
}
int main() {
    int array[] = {4, 2, 5, 1, 3};
    int target = 1;
    int size = sizeof(array) / sizeof(array[0]);
    int result = linearSearch(array, size, target);
    if (result != -1) {
    printf("Element found at index: %d\n", result);
    } else {
    printf("Element not found in the array.\n");
    }
    return 0;
}


3)binary search
#include <stdio.h>
int binarySearch(int array[], int n, int target) {
    int low = 0;
    int high = n - 1;
    while (low <= high) {
        int mid = (low + high) / 2;
        if (array[mid] == target) {
            return mid;
        } else if (array[mid] < target) {
            low = mid + 1;
        } else {
            high = mid - 1;
        }
    }
    return -1;
}
int main() {
    int array[] = {2, 3, 4, 10, 40};
    int n = sizeof(array) / sizeof(array[0]);
    int target = 10;
    int result = binarySearch(array, n, target);
    if (result != -1) {
        printf("Element found at index %d.\n", result);
    } else {
        printf("Element not found.\n");
    }
    return 0;



4)binary search for n numbers
#include <stdio.h>
int binarySearch(int arr[], int l, int r, int x) {
    if (r >= l) {
        int mid = l + (r - l) / 2;
        if (arr[mid] == x)
            return mid;
        if (arr[mid] > x)
            return binarySearch(arr, l, mid - 1, x);
        return binarySearch(arr, mid + 1, r, x);
    }
    return -1;
}
int main() {
    int n, i, key;
    printf("Enter number of elements: ");
    scanf("%d", &n);
    int arr[100];
    printf("Enter %d integers: ", n);
    for (i = 0; i < n; i++)
        scanf("%d", &arr[i]);
    printf("Enter value to find: ");
    scanf("%d", &key);
    int result = binarySearch(arr, 0, n - 1, key);
    if (result == -1)
        printf("Element is not present in array");
    else
        printf("Element is present at index %d", result);
    return 0;
}




5)single linked list 
#include <stdio.h>
#include <stdlib.h>
struct Node {
    int data;
    struct Node* next;
};
struct Node* createNode(int data) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    if (newNode == NULL) {
        printf("Memory allocation failed!\n");
        exit(1);
    }
    newNode->data = data;
    newNode->next = NULL;
    return newNode;
}
void insertAtBeginning(struct Node** head, int data) {
    struct Node* newNode = createNode(data);
    newNode->next = *head;
    *head = newNode;
}
void displayList(struct Node* head) {
    struct Node* current = head;
    while (current != NULL) {
        printf("%d -> ", current->data);
        current = current->next;
    }
    printf("NULL\n");
}
int main() {
    struct Node* head = NULL;
    insertAtBeginning(&head, 3);
    insertAtBeginning(&head, 7);
    insertAtBeginning(&head, 9);
    printf("Linked List: ");
    displayList(head);
    return 0;
}



6)double linked list 
#include <stdio.h>
#include <stdlib.h>
struct Node {
    int data;
    struct Node* prev;
    struct Node* next;
};
struct Node* createNode(int data) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    if (newNode == NULL) {
        printf("Memory allocation failed!\n");
        exit(1);
    }
    newNode->data = data;
    newNode->prev = NULL;
    newNode->next = NULL;
    return newNode;
}
void insertAtBeginning(struct Node** head, int data) {
    struct Node* newNode = createNode(data);
    if (*head != NULL)
        (*head)->prev = newNode;
    newNode->next = *head;
    *head = newNode;
}
void displayList(struct Node* head) {
    struct Node* current = head;
    printf("NULL <-> ");
    while (current != NULL) {
        printf("%d <-> ", current->data);
        current = current->next;
    }
    printf("NULL\n");
}
int main() {
    struct Node* head = NULL;
    insertAtBeginning(&head, 3);
    insertAtBeginning(&head, 7);
    insertAtBeginning(&head, 9);
    printf("Linked List: ");
    displayList(head);

    return 0;
}





